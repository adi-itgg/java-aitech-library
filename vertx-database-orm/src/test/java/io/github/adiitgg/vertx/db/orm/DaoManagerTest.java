package io.github.adiitgg.vertx.db.orm;

import io.github.adiitgg.vertx.db.orm.annotation.Entity;
import io.github.adiitgg.vertx.db.orm.annotation.Id;
import io.github.adiitgg.vertx.db.orm.model.DAOQueryType;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.experimental.Accessors;
import lombok.val;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class DaoManagerTest {

  @Data
  @Accessors(fluent = true)
  @Entity(name = "m_user")
  @AllArgsConstructor
  public static class EntityTest {

    private @Id(autoGenerated = false) Long id;
    private String foo;

  }

  @Test
  void insert() {
    val entityTest = new EntityTest(1L, "test");
    val daoManager = DaoManager.getInstance();
    val preparedQuery = daoManager.getPreparedQueryEntity(entityTest, DAOQueryType.INSERT, false);
    assertEquals("INSERT INTO m_user (id, foo) VALUES ($1, $2)", preparedQuery.sql());
  }

  @Test
  void update() {
    val entityTest = new EntityTest(1L, "test");
    val daoManager = DaoManager.getInstance();
    val preparedQuery = daoManager.getPreparedQueryEntity(entityTest, DAOQueryType.UPDATE, false);
    assertEquals("UPDATE m_user SET foo = $1 WHERE id = $2 ", preparedQuery.sql());
  }

  @Test
  void upsert() {
    val entityTest = new EntityTest(1L, "test");
    val daoManager = DaoManager.getInstance();
    val preparedQuery = daoManager.getPreparedQueryEntity(entityTest, DAOQueryType.UPSERT, false);
    assertEquals("INSERT INTO m_user (id, foo) VALUES ($1, $2) ON CONFLICT (id) DO UPDATE SET foo = EXCLUDED.foo", preparedQuery.sql());
  }

}
